import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export class CategoryService {
  // Listar todas as categorias dispon칤veis para um usu치rio (globais + suas pr칩prias)
  async getAvailableCategories(userId: string) {
    try {
      const categories = await prisma.category.findMany({
        where: {
          OR: [
            { isGlobal: true },           // Categorias globais
            { userId: userId, isGlobal: false }  // Categorias espec칤ficas do usu치rio
          ]
        },
        orderBy: [
          { isGlobal: 'desc' },          // Globais primeiro
          { type: 'asc' },               // Depois por tipo (INCOME, EXPENSE)
          { name: 'asc' }                // Depois por nome
        ]
      });

      return categories;
    } catch (error) {
      console.error('Erro ao buscar categorias:', error);
      throw error;
    }
  }

  // Listar apenas categorias globais
  async getGlobalCategories() {
    try {
      const categories = await prisma.category.findMany({
        where: { isGlobal: true },
        orderBy: [
          { type: 'asc' },
          { name: 'asc' }
        ]
      });

      return categories;
    } catch (error) {
      console.error('Erro ao buscar categorias globais:', error);
      throw error;
    }
  }

  // Listar apenas categorias espec칤ficas de um usu치rio
  async getUserCategories(userId: string) {
    try {
      const categories = await prisma.category.findMany({
        where: { 
          userId: userId,
          isGlobal: false
        },
        orderBy: [
          { type: 'asc' },
          { name: 'asc' }
        ]
      });

      return categories;
    } catch (error) {
      console.error('Erro ao buscar categorias do usu치rio:', error);
      throw error;
    }
  }

  // Criar uma categoria espec칤fica do usu치rio
  async createUserCategory(userId: string, categoryData: {
    name: string;
    type: 'INCOME' | 'EXPENSE';
    color?: string;
    icon?: string;
  }) {
    try {
      // Verificar se j치 existe uma categoria com o mesmo nome para este usu치rio
      const existingUserCategory = await prisma.category.findFirst({
        where: {
          name: categoryData.name,
          userId: userId,
          isGlobal: false
        }
      });

      if (existingUserCategory) {
        throw new Error('J치 existe uma categoria com este nome em suas categorias pessoais');
      }

      // Verificar se existe uma categoria global com o mesmo nome
      const existingGlobalCategory = await prisma.category.findFirst({
        where: {
          name: categoryData.name,
          isGlobal: true
        }
      });

      if (existingGlobalCategory) {
        throw new Error('J치 existe uma categoria global com este nome. Use a categoria global ou escolha outro nome.');
      }

      const category = await prisma.category.create({
        data: {
          name: categoryData.name,
          type: categoryData.type,
          color: categoryData.color || '#6b7280',
          icon: categoryData.icon || '游늬',
          isGlobal: false,
          userId: userId
        }
      });

      return category;
    } catch (error) {
      console.error('Erro ao criar categoria do usu치rio:', error);
      throw error;
    }
  }

  // Buscar uma categoria espec칤fica (global ou do usu치rio)
  async getCategoryById(categoryId: string, userId: string) {
    try {
      const category = await prisma.category.findFirst({
        where: {
          id: categoryId,
          OR: [
            { isGlobal: true },
            { userId: userId, isGlobal: false }
          ]
        }
      });

      return category;
    } catch (error) {
      console.error('Erro ao buscar categoria por ID:', error);
      throw error;
    }
  }

  // Atualizar uma categoria do usu치rio (n칚o pode atualizar globais)
  async updateUserCategory(categoryId: string, userId: string, updateData: {
    name?: string;
    color?: string;
    icon?: string;
  }) {
    try {
      // Verificar se a categoria pertence ao usu치rio
      const category = await prisma.category.findFirst({
        where: {
          id: categoryId,
          userId: userId,
          isGlobal: false
        }
      });

      if (!category) {
        throw new Error('Categoria n칚o encontrada ou n칚o pertence ao usu치rio');
      }

      // Se est치 alterando o nome, verificar duplicatas
      if (updateData.name) {
        const existingUserCategory = await prisma.category.findFirst({
          where: {
            name: updateData.name,
            userId: userId,
            isGlobal: false,
            id: { not: categoryId }
          }
        });

        if (existingUserCategory) {
          throw new Error('J치 existe uma categoria sua com este nome');
        }

        const existingGlobalCategory = await prisma.category.findFirst({
          where: {
            name: updateData.name,
            isGlobal: true
          }
        });

        if (existingGlobalCategory) {
          throw new Error('J치 existe uma categoria global com este nome');
        }
      }

      const updatedCategory = await prisma.category.update({
        where: { id: categoryId },
        data: updateData
      });

      return updatedCategory;
    } catch (error) {
      console.error('Erro ao atualizar categoria:', error);
      throw error;
    }
  }

  // Deletar uma categoria do usu치rio (n칚o pode deletar globais)
  async deleteUserCategory(categoryId: string, userId: string) {
    try {
      // Verificar se a categoria pertence ao usu치rio
      const category = await prisma.category.findFirst({
        where: {
          id: categoryId,
          userId: userId,
          isGlobal: false
        }
      });

      if (!category) {
        throw new Error('Categoria n칚o encontrada ou n칚o pertence ao usu치rio');
      }

      // Verificar se a categoria est치 sendo usada em transa칞칫es
      const transactionCount = await prisma.transaction.count({
        where: { categoryId: categoryId }
      });

      if (transactionCount > 0) {
        throw new Error(`N칚o 칠 poss칤vel deletar a categoria. Ela est치 sendo usada em ${transactionCount} transa칞칚o(칫es).`);
      }

      await prisma.category.delete({
        where: { id: categoryId }
      });

      return { success: true, message: 'Categoria deletada com sucesso' };
    } catch (error) {
      console.error('Erro ao deletar categoria:', error);
      throw error;
    }
  }

  // Estat칤sticas de categorias
  async getCategoryStats(userId: string) {
    try {
      const globalCount = await prisma.category.count({
        where: { isGlobal: true }
      });

      const userCount = await prisma.category.count({
        where: { userId: userId, isGlobal: false }
      });

      const incomeCount = await prisma.category.count({
        where: {
          type: 'INCOME',
          OR: [
            { isGlobal: true },
            { userId: userId, isGlobal: false }
          ]
        }
      });

      const expenseCount = await prisma.category.count({
        where: {
          type: 'EXPENSE',
          OR: [
            { isGlobal: true },
            { userId: userId, isGlobal: false }
          ]
        }
      });

      return {
        global: globalCount,
        user: userCount,
        total: globalCount + userCount,
        income: incomeCount,
        expense: expenseCount
      };
    } catch (error) {
      console.error('Erro ao buscar estat칤sticas de categorias:', error);
      throw error;
    }
  }
}

export const categoryService = new CategoryService();
