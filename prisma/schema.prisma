generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  budgets      Budget[]
  categories   Category[]
  creditCards  CreditCard[]
  transactions Transaction[]

  @@map("users")
}

model Account {
  id            String        @id @default(cuid())
  userId        String
  name          String
  type          AccountType
  bank          String?
  agency        String?
  accountNumber String?
  balance       Decimal       @db.Decimal(15, 2)
  description   String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@map("accounts")
}

model CreditCard {
  id             String                  @id @default(cuid())
  userId         String
  name           String
  bank           String
  lastFourDigits String                  @db.VarChar(4)
  limit          Decimal                 @db.Decimal(15, 2)
  closingDay     Int
  dueDay         Int
  isActive       Boolean                 @default(true)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  bills          CreditCardBill[]
  transactions   CreditCardTransaction[]
  user           User                    @relation(fields: [userId], references: [id])

  @@map("credit_cards")
}

model Category {
  id        String       @id @default(cuid())
  userId    String?      // NULL para categorias globais
  name      String
  type      CategoryType
  color     String?
  icon      String?
  isGlobal  Boolean      @default(false) // true para categorias do sistema
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

model Transaction {
  id              String          @id @default(cuid())
  userId          String
  accountId       String
  categoryId      String?
  amount          Decimal         @db.Decimal(15, 2)
  type            TransactionType
  description     String
  date            DateTime
  referenceNumber String?
  extractData     Json?
  isRecurring     Boolean         @default(false)
  recurringType   RecurringType?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  account         Account         @relation(fields: [accountId], references: [id])
  category        Category?       @relation(fields: [categoryId], references: [id])
  user            User            @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model CreditCardTransaction {
  id                 String          @id @default(cuid())
  creditCardId       String
  amount             Decimal         @db.Decimal(15, 2)
  description        String
  date               DateTime
  installments       Int             @default(1)
  currentInstallment Int             @default(1)
  merchant           String?
  category           String?
  billId             String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  bill               CreditCardBill? @relation(fields: [billId], references: [id])
  creditCard         CreditCard      @relation(fields: [creditCardId], references: [id])

  @@map("credit_card_transactions")
}

model CreditCardBill {
  id           String                  @id @default(cuid())
  creditCardId String
  amount       Decimal                 @db.Decimal(15, 2)
  dueDate      DateTime
  closingDate  DateTime
  isPaid       Boolean                 @default(false)
  paidAt       DateTime?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  creditCard   CreditCard              @relation(fields: [creditCardId], references: [id])
  transactions CreditCardTransaction[]

  @@map("credit_card_bills")
}

model Budget {
  id         String   @id @default(cuid())
  userId     String
  categoryId String
  amount     Decimal  @db.Decimal(15, 2)
  spent      Decimal  @default(0) @db.Decimal(15, 2)
  month      Int
  year       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, categoryId, month, year])
  @@map("budgets")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  oldValue  Json?
  newValue  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
  CRYPTO
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
